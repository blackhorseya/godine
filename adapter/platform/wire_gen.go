// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package platform

import (
	"fmt"
	"github.com/blackhorseya/godine/adapter/platform/handlers"
	"github.com/blackhorseya/godine/app/domain/logistics"
	"github.com/blackhorseya/godine/app/domain/notification"
	"github.com/blackhorseya/godine/app/domain/order"
	"github.com/blackhorseya/godine/app/domain/payment"
	"github.com/blackhorseya/godine/app/domain/restaurant"
	"github.com/blackhorseya/godine/app/domain/user"
	"github.com/blackhorseya/godine/app/infra/authx"
	"github.com/blackhorseya/godine/app/infra/configx"
	"github.com/blackhorseya/godine/app/infra/otelx"
	"github.com/blackhorseya/godine/app/infra/snowflakex"
	"github.com/blackhorseya/godine/app/infra/storage/mongodbx"
	"github.com/blackhorseya/godine/app/infra/storage/postgresqlx"
	"github.com/blackhorseya/godine/app/infra/transports/grpcx"
	"github.com/blackhorseya/godine/pkg/adapterx"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func New(v *viper.Viper) (adapterx.Server, func(), error) {
	configuration, err := configx.NewConfiguration(v)
	if err != nil {
		return nil, nil, err
	}
	application, err := InitApplication(configuration)
	if err != nil {
		return nil, nil, err
	}
	sdk, cleanup, err := otelx.NewSDK(application)
	if err != nil {
		return nil, nil, err
	}
	authxAuthx, err := authx.New(application)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := grpcx.NewClient(configuration, authxAuthx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	restaurantServiceClient, err := restaurant.NewRestaurantServiceClient(client)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	restaurantServiceHandler := handlers.NewRestaurantServiceHandler(restaurantServiceClient)
	injector := &Injector{
		C:                        configuration,
		A:                        application,
		OTelx:                    sdk,
		Authx:                    authxAuthx,
		RestaurantServiceHandler: restaurantServiceHandler,
	}
	accountServiceServer := user.NewAccountService()
	mongoClient, cleanup2, err := mongodbx.NewClientWithClean(application)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iRestaurantRepo := mongodbx.NewRestaurantRepo(mongoClient)
	restaurantServiceServer := restaurant.NewRestaurantService(iRestaurantRepo)
	menuServiceServer := restaurant.NewMenuService(iRestaurantRepo)
	iPaymentRepo := mongodbx.NewPaymentRepo(mongoClient)
	paymentServiceServer := payment.NewPaymentService(iPaymentRepo)
	iNotificationRepo := mongodbx.NewNotificationRepo(mongoClient)
	notificationServiceServer := notification.NewNotificationService(iNotificationRepo)
	db, err := postgresqlx.NewClient(application)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	node, err := snowflakex.NewNode()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	iOrderRepo := postgresqlx.NewOrderRepo(db, node)
	menuServiceClient, err := restaurant.NewMenuServiceClient(client)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accountServiceClient, err := user.NewAccountServiceClient(client)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	notificationServiceClient, err := notification.NewNotificationServiceClient(client)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	paymentServiceClient, err := payment.NewPaymentServiceClient(client)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	logisticsServiceClient, err := logistics.NewLogisticsServiceClient(client)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	orderServiceServer := order.NewOrderService(iOrderRepo, restaurantServiceClient, menuServiceClient, accountServiceClient, notificationServiceClient, paymentServiceClient, logisticsServiceClient)
	iDeliveryRepo := mongodbx.NewDeliveryRepo(mongoClient)
	logisticsServiceServer := logistics.NewLogisticsService(iDeliveryRepo, notificationServiceClient)
	initServers := NewInitServersFn(accountServiceServer, restaurantServiceServer, menuServiceServer, paymentServiceServer, notificationServiceServer, orderServiceServer, logisticsServiceServer)
	server, err := grpcx.NewServer(application, initServers, authxAuthx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	adapterxServer := NewServer(injector, server)
	return adapterxServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

const serviceName = "platform"

// InitApplication is used to initialize the application.
func InitApplication(config *configx.Configuration) (*configx.Application, error) {
	app, err := config.GetService(serviceName)
	if err != nil {
		return nil, fmt.Errorf("failed to get service %s: %w", serviceName, err)
	}

	return app, nil
}
