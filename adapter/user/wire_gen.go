// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"fmt"
	"github.com/blackhorseya/godine/app/infra/authx"
	"github.com/blackhorseya/godine/app/infra/configx"
	"github.com/blackhorseya/godine/app/infra/otelx"
	"github.com/blackhorseya/godine/app/infra/transports/httpx"
	"github.com/blackhorseya/godine/pkg/adapterx"
	"github.com/blackhorseya/godine/pkg/contextx"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func New(v *viper.Viper) (adapterx.RestfulLegacy, error) {
	configuration, err := configx.NewConfiguration(v)
	if err != nil {
		return nil, err
	}
	application, err := initApplication(configuration)
	if err != nil {
		return nil, err
	}
	authxAuthx, err := authx.New(application)
	if err != nil {
		return nil, err
	}
	injector := &Injector{
		C:     configuration,
		A:     application,
		Authx: authxAuthx,
	}
	server, err := httpx.NewServer(application)
	if err != nil {
		return nil, err
	}
	restfulLegacy := NewRestful(injector, server)
	return restfulLegacy, nil
}

// wire.go:

func initApplication(config *configx.Configuration) (*configx.Application, error) {
	app, err := config.GetService("user")
	if err != nil {
		return nil, fmt.Errorf("failed to get service %s: %w", "platform", err)
	}

	err = otelx.SetupOTelSDK(contextx.Background(), app)
	if err != nil {
		return nil, fmt.Errorf("failed to setup otel sdk: %w", err)
	}

	return app, nil
}
