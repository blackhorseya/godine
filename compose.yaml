# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  restaurant_restful:
    build:
      context: .
      target: final
    command:
      - --config=/app/configs/example.yaml
      - start
      - restaurant-restful
    ports:
      - 1992:1992
    volumes:
      - ./configs/example.yaml:/app/configs/example.yaml
    depends_on:
      - mongodb

  order_restful:
    build:
      context: .
      target: final
    command:
      - --config=/app/configs/example.yaml
      - start
      - order-restful
    ports:
      - 1993:1993
    volumes:
      - ./configs/example.yaml:/app/configs/example.yaml
    depends_on:
      - mongodb

  user_restful:
    build:
      context: .
      target: final
    command:
      - --config=/app/configs/example.yaml
      - start
      - user-restful
    ports:
      - 1994:1994
    volumes:
      - ./configs/example.yaml:/app/configs/example.yaml
    depends_on:
      - mongodb

  logistics_restful:
    build:
      context: .
      target: final
    command:
      - --config=/app/configs/example.yaml
      - start
      - logistics-restful
    ports:
      - 1995:1995
    volumes:
      - ./configs/example.yaml:/app/configs/example.yaml
    depends_on:
      - mongodb

  notify_restful:
    build:
      context: .
      target: final
    command:
      - --config=/app/configs/example.yaml
      - start
      - notify-restful
    ports:
      - 1996:1996
    volumes:
      - ./configs/example.yaml:/app/configs/example.yaml
    depends_on:
      - mongodb

  mongodb:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: changeme
    volumes:
      - mongo-data:/data/db

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./configs/otel-collector-config.yaml:/etc/otel-collector-config.yaml

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - 26686:16686

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 29090:9090

  broker:
    image: apache/kafka
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

volumes:
  mongo-data:
