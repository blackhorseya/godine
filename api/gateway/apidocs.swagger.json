{
  "swagger": "2.0",
  "info": {
    "title": "Restaurant Service",
    "version": "0.1.0",
    "contact": {
      "name": "Sean Zheng",
      "url": "https://github.com/blackhorseya",
      "email": "blackhorseya@gmail.com"
    },
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://github.com/blackhorseya/godine/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "RestaurantService"
    },
    {
      "name": "LogisticsService"
    },
    {
      "name": "NotificationService"
    },
    {
      "name": "OrderService"
    },
    {
      "name": "PaymentService"
    },
    {
      "name": "MenuService"
    },
    {
      "name": "AccountService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/restaurants": {
      "get": {
        "operationId": "RestaurantService_ListRestaurants",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/restaurantRestaurant"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of restaurantRestaurant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RestaurantService"
        ]
      }
    },
    "/api/v1/restaurants/{restaurantId}": {
      "get": {
        "operationId": "RestaurantService_GetRestaurant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restaurantRestaurant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RestaurantService"
        ]
      }
    }
  },
  "definitions": {
    "logisticsAddress": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string",
          "title": "Street is the street address of the user.\n@gotags: bson:\"street\""
        },
        "city": {
          "type": "string",
          "title": "City is the city where the user is located.\n@gotags: bson:\"city\""
        },
        "state": {
          "type": "string",
          "title": "State is the state where the user is located.\n@gotags: bson:\"state\""
        },
        "zipCode": {
          "type": "string",
          "title": "ZipCode is the postal code of the user's location.\n@gotags: bson:\"zip_code\""
        }
      },
      "description": "Address is a value object that represents the address of a user."
    },
    "logisticsDelivery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID is the unique identifier of the delivery.\n@gotags: bson:\"_id,omitempty\""
        },
        "orderId": {
          "type": "string",
          "title": "OrderID is the identifier of the order associated with the delivery.\n@gotags: bson:\"order_id\""
        },
        "userId": {
          "type": "string",
          "title": "UserID is the identifier of the user who placed the order.\n@gotags: bson:\"user_id\""
        },
        "address": {
          "$ref": "#/definitions/logisticsAddress",
          "title": "Address is the address where the delivery is to be made.\n@gotags: bson:\"address\""
        },
        "driverId": {
          "type": "string",
          "title": "DriverID is the identifier of the driver assigned to the delivery.\n@gotags: bson:\"driver_id\""
        },
        "status": {
          "$ref": "#/definitions/logisticsDeliveryStatus",
          "title": "Status is the current status of the delivery (e.g., pending, in transit, delivered).\n@gotags: bson:\"status\""
        },
        "pickupAt": {
          "type": "string",
          "format": "date-time",
          "title": "PickupAt is the timestamp when the delivery was picked up.\n@gotags: bson:\"pickup_at\""
        },
        "deliveryAt": {
          "type": "string",
          "format": "date-time",
          "title": "DeliveryAt is the timestamp when the delivery is expected to be delivered.\n@gotags: bson:\"delivery_at\""
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt is the timestamp when the delivery was created.\n@gotags: bson:\"created_at\""
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt is the timestamp when the delivery was last updated.\n@gotags: bson:\"updated_at\""
        }
      },
      "description": "Delivery is an entity that represents a delivery."
    },
    "logisticsDeliveryStatus": {
      "type": "string",
      "enum": [
        "DELIVERY_STATUS_UNSPECIFIED",
        "DELIVERY_STATUS_PENDING",
        "DELIVERY_STATUS_IN_TRANSIT",
        "DELIVERY_STATUS_DELIVERED"
      ],
      "default": "DELIVERY_STATUS_UNSPECIFIED",
      "description": "DeliveryState is an enum that represents the state of a delivery."
    },
    "notificationNotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID is the unique identifier of the notification.\n@gotags: bson:\"_id,omitempty\""
        },
        "senderId": {
          "type": "string",
          "title": "SenderID is the identifier of the user who sent the notification.\n@gotags: bson:\"sender_id\""
        },
        "userId": {
          "type": "string",
          "title": "UserID is the identifier of the user to whom the notification is sent.\n@gotags: bson:\"user_id\""
        },
        "orderId": {
          "type": "string",
          "title": "OrderID is the identifier of the order associated with the notification.\n@gotags: bson:\"order_id\""
        },
        "type": {
          "type": "string",
          "title": "Type represents the type of notification (e.g., order_status, delivery_status).\n@gotags: bson:\"type\""
        },
        "message": {
          "type": "string",
          "title": "Message is the content of the notification.\n@gotags: bson:\"message\""
        },
        "status": {
          "type": "string",
          "title": "Status is the current status of the notification (e.g., pending, sent).\n@gotags: bson:\"status\""
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt is the timestamp when the notification was created.\n@gotags: bson:\"created_at\""
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt is the timestamp when the notification was last updated.\n@gotags: bson:\"updated_at\""
        }
      },
      "description": "Notification is an entity that represents a notification."
    },
    "orderOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID is the unique identifier of the order.\n@gotags: gorm:\"column:id;primaryKey;not null\"`"
        },
        "userId": {
          "type": "string",
          "title": "UserID is the unique identifier of the user.\n@gotags: gorm:\"column:user_id;not null\""
        },
        "restaurantId": {
          "type": "string",
          "title": "RestaurantID is the unique identifier of the restaurant.\n@gotags: gorm:\"column:restaurant_id;not null\""
        },
        "paymentId": {
          "type": "string",
          "title": "PaymentID is the unique identifier of the payment.\n@gotags: gorm:\"column:payment_id\""
        },
        "deliveryId": {
          "type": "string",
          "title": "DeliveryID is the unique identifier of the delivery.\n@gotags: gorm:\"column:delivery_id\""
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orderOrderItem"
          },
          "title": "Items is the items in the order.\n@gotags: gorm:\"foreignKey:order_id;references:id;constraint:OnDelete:CASCADE\"`"
        },
        "totalAmount": {
          "type": "number",
          "format": "double",
          "title": "TotalPrice is the total price of the order.\n@gotags: gorm:\"column:total_amount\"`"
        },
        "status": {
          "$ref": "#/definitions/orderOrderStatus",
          "title": "Status is the status of the order.\n@gotags: gorm:\"column:status;not null;default:1\"`"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt is the time the order was created.\n@gotags: gorm:\"serializer:timestamppb;type:time;column:created_at\"`"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt is the time the order was last updated.\n@gotags: gorm:\"serializer:timestamppb;type:time;column:updated_at\"`"
        }
      },
      "description": "Order is an entity and aggregate root that represents an order."
    },
    "orderOrderItem": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "format": "int64",
          "title": "OrderID is the unique identifier of the order.\n@gotags: gorm:\"column:order_id;primaryKey;not null\""
        },
        "menuItemId": {
          "type": "string",
          "title": "MenuItemID is the unique identifier of the menu item.\n@gotags: gorm:\"column:menu_item_id;primaryKey;not null\""
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "Quantity is the quantity of the item.\n@gotags: gorm:\"column:quantity\""
        },
        "price": {
          "type": "number",
          "format": "double",
          "title": "Price is the price of the item.\n@gotags: gorm:\"column:price\"`"
        }
      },
      "description": "OrderItem is a value object that represents an item in an order."
    },
    "orderOrderStatus": {
      "type": "string",
      "enum": [
        "ORDER_STATUS_UNSPECIFIED",
        "ORDER_STATUS_PENDING",
        "ORDER_STATUS_CONFIRMED",
        "ORDER_STATUS_PREPARING",
        "ORDER_STATUS_OUT_FOR_DELIVERY",
        "ORDER_STATUS_DELIVERED",
        "ORDER_STATUS_CANCELLED"
      ],
      "default": "ORDER_STATUS_UNSPECIFIED",
      "description": "OrderStatus is an enum that represents the status of an order."
    },
    "orderSubmitOrderRequestOrderItem": {
      "type": "object",
      "properties": {
        "menuItemId": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "paymentPayment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id is the identifier of payment\n@gotags: bson:\"_id,omitempty\""
        },
        "amount": {
          "$ref": "#/definitions/paymentPaymentAmount",
          "title": "amount is the amount of payment\n@gotags: bson:\"amount\""
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "createdAt is the time when payment created\n@gotags: bson:\"created_at,omitempty\""
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updatedAt is the time when payment updated\n@gotags: bson:\"updated_at,omitempty\""
        },
        "orderId": {
          "type": "string",
          "title": "OrderID is the identifier of order\n@gotags: bson:\"order_id\""
        },
        "userId": {
          "type": "string",
          "title": "UserID is the identifier of user\n@gotags: bson:\"user_id\""
        }
      },
      "title": "Payment is an entity that represents a payment"
    },
    "paymentPaymentAmount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "title": "value is the amount of payment\n@gotags: bson:\"value\""
        },
        "currency": {
          "type": "string",
          "title": "currency is the currency of payment\n@gotags: bson:\"currency\""
        }
      },
      "title": "PaymentAmount is a value object that represents the amount of payment"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "restaurantAddress": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string",
          "title": "Street is the street address of the user.\n@gotags: bson:\"street\""
        },
        "city": {
          "type": "string",
          "title": "City is the city where the user is located.\n@gotags: bson:\"city\""
        },
        "state": {
          "type": "string",
          "title": "State is the state where the user is located.\n@gotags: bson:\"state\""
        },
        "zipCode": {
          "type": "string",
          "title": "ZipCode is the postal code of the user's location.\n@gotags: bson:\"zip_code\""
        }
      },
      "description": "Address is a value object that represents the address of a user."
    },
    "restaurantMenuItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID is the unique identifier of the menu item.\n@gotags: bson:\"_id\""
        },
        "name": {
          "type": "string",
          "title": "Name is the name of the menu item.\n@gotags: bson:\"name\""
        },
        "description": {
          "type": "string",
          "title": "Description is the description of the menu item.\n@gotags: bson:\"description\""
        },
        "price": {
          "type": "number",
          "format": "double",
          "title": "Price is the price of the menu item.\n@gotags: bson:\"price\""
        },
        "isAvailable": {
          "type": "boolean",
          "title": "IsAvailable is the availability of the menu item.\n@gotags: bson:\"is_available\""
        }
      }
    },
    "restaurantRestaurant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID is the unique identifier of the restaurant.\n@gotags: bson:\"_id\""
        },
        "name": {
          "type": "string",
          "title": "Name is the name of the restaurant.\n@gotags: bson:\"name\""
        },
        "address": {
          "$ref": "#/definitions/restaurantAddress",
          "title": "Address is the address of the restaurant.\n@gotags: bson:\"address\""
        },
        "menu": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/restaurantMenuItem"
          },
          "title": "Menu is the menu of the restaurant.\n@gotags: bson:\"menu\""
        },
        "isOpen": {
          "type": "boolean",
          "title": "IsOpen is the availability of the restaurant.\n@gotags: bson:\"is_open\""
        },
        "createdBy": {
          "type": "string",
          "title": "CreatedBy is the user who created the restaurant.\n@gotags: bson:\"created_by\""
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt is the timestamp when the restaurant was created.\n@gotags: bson:\"created_at\""
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt is the timestamp when the restaurant was last updated.\n@gotags: bson:\"updated_at\""
        }
      },
      "description": "Restaurant is a value object that represents a restaurant."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "userAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID is the unique identifier of the user account.\n@gotags: bson:\"_id\""
        },
        "username": {
          "type": "string",
          "title": "Username is the username of the user.\n@gotags: bson:\"username\""
        },
        "email": {
          "type": "string",
          "title": "Email is the email address of the user.\n@gotags: bson:\"email\""
        },
        "password": {
          "type": "string",
          "title": "Password is the password of the user.\n@gotags: json:\"-\" bson:\"password\""
        },
        "accessToken": {
          "type": "string",
          "title": "AccessToken is the access token of the user.\n@gotags: bson:\"-\""
        },
        "address": {
          "$ref": "#/definitions/userAddress",
          "title": "Address is the address of the user.\n@gotags: bson:\"address\""
        },
        "isActive": {
          "type": "boolean",
          "title": "IsActive is the status of the user account.\n@gotags: bson:\"is_active\""
        },
        "Level": {
          "type": "integer",
          "format": "int64",
          "title": "Level is the access level of the user account.\n@gotags: bson:\"level\""
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/userRole"
          },
          "title": "Roles is the list of roles assigned to the user.\n@gotags: bson:\"roles\""
        },
        "socialIDMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "SocialIDMap is the map of social IDs of the user.\n@gotags: bson:\"social_id_map\""
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt is the creation time of the user account.\n@gotags: bson:\"created_at\""
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "UpdatedAt is the update time of the user account.\n@gotags: bson:\"updated_at\""
        }
      },
      "description": "Account is an entity that represents a user account."
    },
    "userAddress": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string",
          "title": "Street is the street address of the user.\n@gotags: bson:\"street\""
        },
        "city": {
          "type": "string",
          "title": "City is the city where the user is located.\n@gotags: bson:\"city\""
        },
        "state": {
          "type": "string",
          "title": "State is the state where the user is located.\n@gotags: bson:\"state\""
        },
        "zipCode": {
          "type": "string",
          "title": "ZipCode is the postal code of the user's location.\n@gotags: bson:\"zip_code\""
        }
      },
      "description": "Address is a value object that represents the address of a user."
    },
    "userRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID is the unique identifier of the role.\n@gotags: bson:\"_id\""
        },
        "name": {
          "type": "string",
          "title": "Name is the name of the role.\n@gotags: bson:\"name\""
        }
      },
      "description": "Role is an entity that represents the role of a user."
    }
  }
}
