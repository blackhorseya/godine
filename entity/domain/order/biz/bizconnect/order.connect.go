// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: domain/order/biz/order.proto

package bizconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	biz "github.com/blackhorseya/godine/entity/domain/order/biz"
	model "github.com/blackhorseya/godine/entity/domain/order/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrderServiceName is the fully-qualified name of the OrderService service.
	OrderServiceName = "order.OrderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrderServiceSubmitOrderProcedure is the fully-qualified name of the OrderService's SubmitOrder
	// RPC.
	OrderServiceSubmitOrderProcedure = "/order.OrderService/SubmitOrder"
	// OrderServiceListOrdersProcedure is the fully-qualified name of the OrderService's ListOrders RPC.
	OrderServiceListOrdersProcedure = "/order.OrderService/ListOrders"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	orderServiceServiceDescriptor           = biz.File_domain_order_biz_order_proto.Services().ByName("OrderService")
	orderServiceSubmitOrderMethodDescriptor = orderServiceServiceDescriptor.Methods().ByName("SubmitOrder")
	orderServiceListOrdersMethodDescriptor  = orderServiceServiceDescriptor.Methods().ByName("ListOrders")
)

// OrderServiceClient is a client for the order.OrderService service.
type OrderServiceClient interface {
	SubmitOrder(context.Context, *connect.Request[biz.SubmitOrderRequest]) (*connect.Response[model.Order], error)
	ListOrders(context.Context, *connect.Request[biz.ListOrdersRequest]) (*connect.ServerStreamForClient[model.Order], error)
}

// NewOrderServiceClient constructs a client for the order.OrderService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orderServiceClient{
		submitOrder: connect.NewClient[biz.SubmitOrderRequest, model.Order](
			httpClient,
			baseURL+OrderServiceSubmitOrderProcedure,
			connect.WithSchema(orderServiceSubmitOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrders: connect.NewClient[biz.ListOrdersRequest, model.Order](
			httpClient,
			baseURL+OrderServiceListOrdersProcedure,
			connect.WithSchema(orderServiceListOrdersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// orderServiceClient implements OrderServiceClient.
type orderServiceClient struct {
	submitOrder *connect.Client[biz.SubmitOrderRequest, model.Order]
	listOrders  *connect.Client[biz.ListOrdersRequest, model.Order]
}

// SubmitOrder calls order.OrderService.SubmitOrder.
func (c *orderServiceClient) SubmitOrder(ctx context.Context, req *connect.Request[biz.SubmitOrderRequest]) (*connect.Response[model.Order], error) {
	return c.submitOrder.CallUnary(ctx, req)
}

// ListOrders calls order.OrderService.ListOrders.
func (c *orderServiceClient) ListOrders(ctx context.Context, req *connect.Request[biz.ListOrdersRequest]) (*connect.ServerStreamForClient[model.Order], error) {
	return c.listOrders.CallServerStream(ctx, req)
}

// OrderServiceHandler is an implementation of the order.OrderService service.
type OrderServiceHandler interface {
	SubmitOrder(context.Context, *connect.Request[biz.SubmitOrderRequest]) (*connect.Response[model.Order], error)
	ListOrders(context.Context, *connect.Request[biz.ListOrdersRequest], *connect.ServerStream[model.Order]) error
}

// NewOrderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrderServiceHandler(svc OrderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orderServiceSubmitOrderHandler := connect.NewUnaryHandler(
		OrderServiceSubmitOrderProcedure,
		svc.SubmitOrder,
		connect.WithSchema(orderServiceSubmitOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orderServiceListOrdersHandler := connect.NewServerStreamHandler(
		OrderServiceListOrdersProcedure,
		svc.ListOrders,
		connect.WithSchema(orderServiceListOrdersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.OrderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrderServiceSubmitOrderProcedure:
			orderServiceSubmitOrderHandler.ServeHTTP(w, r)
		case OrderServiceListOrdersProcedure:
			orderServiceListOrdersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrderServiceHandler struct{}

func (UnimplementedOrderServiceHandler) SubmitOrder(context.Context, *connect.Request[biz.SubmitOrderRequest]) (*connect.Response[model.Order], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.OrderService.SubmitOrder is not implemented"))
}

func (UnimplementedOrderServiceHandler) ListOrders(context.Context, *connect.Request[biz.ListOrdersRequest], *connect.ServerStream[model.Order]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("order.OrderService.ListOrders is not implemented"))
}
