// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: domain/order/biz/order.proto

package biz

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/order/model"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockOrderService_ListOrdersClient is a mock of OrderService_ListOrdersClient interface.
type MockOrderService_ListOrdersClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderService_ListOrdersClientMockRecorder
}

// MockOrderService_ListOrdersClientMockRecorder is the mock recorder for MockOrderService_ListOrdersClient.
type MockOrderService_ListOrdersClientMockRecorder struct {
	mock *MockOrderService_ListOrdersClient
}

// NewMockOrderService_ListOrdersClient creates a new mock instance.
func NewMockOrderService_ListOrdersClient(ctrl *gomock.Controller) *MockOrderService_ListOrdersClient {
	mock := &MockOrderService_ListOrdersClient{ctrl: ctrl}
	mock.recorder = &MockOrderService_ListOrdersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService_ListOrdersClient) EXPECT() *MockOrderService_ListOrdersClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockOrderService_ListOrdersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockOrderService_ListOrdersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockOrderService_ListOrdersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOrderService_ListOrdersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockOrderService_ListOrdersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockOrderService_ListOrdersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockOrderService_ListOrdersClient) Recv() (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockOrderService_ListOrdersClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockOrderService_ListOrdersClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOrderService_ListOrdersClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockOrderService_ListOrdersClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOrderService_ListOrdersClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockOrderService_ListOrdersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockOrderService_ListOrdersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockOrderService_ListOrdersClient)(nil).Trailer))
}

// MockOrderService_ListOrdersServer is a mock of OrderService_ListOrdersServer interface.
type MockOrderService_ListOrdersServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderService_ListOrdersServerMockRecorder
}

// MockOrderService_ListOrdersServerMockRecorder is the mock recorder for MockOrderService_ListOrdersServer.
type MockOrderService_ListOrdersServerMockRecorder struct {
	mock *MockOrderService_ListOrdersServer
}

// NewMockOrderService_ListOrdersServer creates a new mock instance.
func NewMockOrderService_ListOrdersServer(ctrl *gomock.Controller) *MockOrderService_ListOrdersServer {
	mock := &MockOrderService_ListOrdersServer{ctrl: ctrl}
	mock.recorder = &MockOrderService_ListOrdersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService_ListOrdersServer) EXPECT() *MockOrderService_ListOrdersServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockOrderService_ListOrdersServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOrderService_ListOrdersServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockOrderService_ListOrdersServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOrderService_ListOrdersServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockOrderService_ListOrdersServer) Send(arg0 *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOrderService_ListOrdersServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockOrderService_ListOrdersServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockOrderService_ListOrdersServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockOrderService_ListOrdersServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOrderService_ListOrdersServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockOrderService_ListOrdersServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockOrderService_ListOrdersServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockOrderService_ListOrdersServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockOrderService_ListOrdersServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockOrderService_ListOrdersServer)(nil).SetTrailer), arg0)
}

// MockOrderServiceClient is a mock of OrderServiceClient interface.
type MockOrderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceClientMockRecorder
}

// MockOrderServiceClientMockRecorder is the mock recorder for MockOrderServiceClient.
type MockOrderServiceClientMockRecorder struct {
	mock *MockOrderServiceClient
}

// NewMockOrderServiceClient creates a new mock instance.
func NewMockOrderServiceClient(ctrl *gomock.Controller) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceClient) EXPECT() *MockOrderServiceClientMockRecorder {
	return m.recorder
}

// ListOrders mocks base method.
func (m *MockOrderServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (OrderService_ListOrdersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrders", varargs...)
	ret0, _ := ret[0].(OrderService_ListOrdersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderServiceClientMockRecorder) ListOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderServiceClient)(nil).ListOrders), varargs...)
}

// SubmitOrder mocks base method.
func (m *MockOrderServiceClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*model.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitOrder", varargs...)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOrder indicates an expected call of SubmitOrder.
func (mr *MockOrderServiceClientMockRecorder) SubmitOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).SubmitOrder), varargs...)
}

// MockOrderServiceServer is a mock of OrderServiceServer interface.
type MockOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceServerMockRecorder
}

// MockOrderServiceServerMockRecorder is the mock recorder for MockOrderServiceServer.
type MockOrderServiceServerMockRecorder struct {
	mock *MockOrderServiceServer
}

// NewMockOrderServiceServer creates a new mock instance.
func NewMockOrderServiceServer(ctrl *gomock.Controller) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceServer) EXPECT() *MockOrderServiceServerMockRecorder {
	return m.recorder
}

// ListOrders mocks base method.
func (m *MockOrderServiceServer) ListOrders(blob *ListOrdersRequest, server OrderService_ListOrdersServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderServiceServerMockRecorder) ListOrders(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderServiceServer)(nil).ListOrders), blob, server)
}

// SubmitOrder mocks base method.
func (m *MockOrderServiceServer) SubmitOrder(ctx context.Context, in *SubmitOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOrder", ctx, in)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOrder indicates an expected call of SubmitOrder.
func (mr *MockOrderServiceServerMockRecorder) SubmitOrder(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).SubmitOrder), ctx, in)
}
