// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: domain/restaurant/biz/menu.proto

package biz

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/restaurant/model"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockMenuService_ListMenuItemsClient is a mock of MenuService_ListMenuItemsClient interface.
type MockMenuService_ListMenuItemsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMenuService_ListMenuItemsClientMockRecorder
}

// MockMenuService_ListMenuItemsClientMockRecorder is the mock recorder for MockMenuService_ListMenuItemsClient.
type MockMenuService_ListMenuItemsClientMockRecorder struct {
	mock *MockMenuService_ListMenuItemsClient
}

// NewMockMenuService_ListMenuItemsClient creates a new mock instance.
func NewMockMenuService_ListMenuItemsClient(ctrl *gomock.Controller) *MockMenuService_ListMenuItemsClient {
	mock := &MockMenuService_ListMenuItemsClient{ctrl: ctrl}
	mock.recorder = &MockMenuService_ListMenuItemsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuService_ListMenuItemsClient) EXPECT() *MockMenuService_ListMenuItemsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMenuService_ListMenuItemsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMenuService_ListMenuItemsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMenuService_ListMenuItemsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMenuService_ListMenuItemsClient) Recv() (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockMenuService_ListMenuItemsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockMenuService_ListMenuItemsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMenuService_ListMenuItemsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMenuService_ListMenuItemsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMenuService_ListMenuItemsClient)(nil).Trailer))
}

// MockMenuService_ListMenuItemsServer is a mock of MenuService_ListMenuItemsServer interface.
type MockMenuService_ListMenuItemsServer struct {
	ctrl     *gomock.Controller
	recorder *MockMenuService_ListMenuItemsServerMockRecorder
}

// MockMenuService_ListMenuItemsServerMockRecorder is the mock recorder for MockMenuService_ListMenuItemsServer.
type MockMenuService_ListMenuItemsServerMockRecorder struct {
	mock *MockMenuService_ListMenuItemsServer
}

// NewMockMenuService_ListMenuItemsServer creates a new mock instance.
func NewMockMenuService_ListMenuItemsServer(ctrl *gomock.Controller) *MockMenuService_ListMenuItemsServer {
	mock := &MockMenuService_ListMenuItemsServer{ctrl: ctrl}
	mock.recorder = &MockMenuService_ListMenuItemsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuService_ListMenuItemsServer) EXPECT() *MockMenuService_ListMenuItemsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMenuService_ListMenuItemsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockMenuService_ListMenuItemsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockMenuService_ListMenuItemsServer) Send(arg0 *model.MenuItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMenuService_ListMenuItemsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockMenuService_ListMenuItemsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockMenuService_ListMenuItemsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMenuService_ListMenuItemsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMenuService_ListMenuItemsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMenuService_ListMenuItemsServer)(nil).SetTrailer), arg0)
}

// MockMenuServiceClient is a mock of MenuServiceClient interface.
type MockMenuServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMenuServiceClientMockRecorder
}

// MockMenuServiceClientMockRecorder is the mock recorder for MockMenuServiceClient.
type MockMenuServiceClientMockRecorder struct {
	mock *MockMenuServiceClient
}

// NewMockMenuServiceClient creates a new mock instance.
func NewMockMenuServiceClient(ctrl *gomock.Controller) *MockMenuServiceClient {
	mock := &MockMenuServiceClient{ctrl: ctrl}
	mock.recorder = &MockMenuServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuServiceClient) EXPECT() *MockMenuServiceClientMockRecorder {
	return m.recorder
}

// AddMenuItem mocks base method.
func (m *MockMenuServiceClient) AddMenuItem(ctx context.Context, in *AddMenuItemRequest, opts ...grpc.CallOption) (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMenuItem", varargs...)
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMenuItem indicates an expected call of AddMenuItem.
func (mr *MockMenuServiceClientMockRecorder) AddMenuItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMenuItem", reflect.TypeOf((*MockMenuServiceClient)(nil).AddMenuItem), varargs...)
}

// GetMenuItem mocks base method.
func (m *MockMenuServiceClient) GetMenuItem(ctx context.Context, in *GetMenuItemRequest, opts ...grpc.CallOption) (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMenuItem", varargs...)
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItem indicates an expected call of GetMenuItem.
func (mr *MockMenuServiceClientMockRecorder) GetMenuItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItem", reflect.TypeOf((*MockMenuServiceClient)(nil).GetMenuItem), varargs...)
}

// ListMenuItems mocks base method.
func (m *MockMenuServiceClient) ListMenuItems(ctx context.Context, in *ListMenuItemsRequest, opts ...grpc.CallOption) (MenuService_ListMenuItemsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMenuItems", varargs...)
	ret0, _ := ret[0].(MenuService_ListMenuItemsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMenuItems indicates an expected call of ListMenuItems.
func (mr *MockMenuServiceClientMockRecorder) ListMenuItems(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMenuItems", reflect.TypeOf((*MockMenuServiceClient)(nil).ListMenuItems), varargs...)
}

// MockMenuServiceServer is a mock of MenuServiceServer interface.
type MockMenuServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMenuServiceServerMockRecorder
}

// MockMenuServiceServerMockRecorder is the mock recorder for MockMenuServiceServer.
type MockMenuServiceServerMockRecorder struct {
	mock *MockMenuServiceServer
}

// NewMockMenuServiceServer creates a new mock instance.
func NewMockMenuServiceServer(ctrl *gomock.Controller) *MockMenuServiceServer {
	mock := &MockMenuServiceServer{ctrl: ctrl}
	mock.recorder = &MockMenuServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuServiceServer) EXPECT() *MockMenuServiceServerMockRecorder {
	return m.recorder
}

// AddMenuItem mocks base method.
func (m *MockMenuServiceServer) AddMenuItem(ctx context.Context, in *AddMenuItemRequest) (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMenuItem", ctx, in)
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMenuItem indicates an expected call of AddMenuItem.
func (mr *MockMenuServiceServerMockRecorder) AddMenuItem(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMenuItem", reflect.TypeOf((*MockMenuServiceServer)(nil).AddMenuItem), ctx, in)
}

// GetMenuItem mocks base method.
func (m *MockMenuServiceServer) GetMenuItem(ctx context.Context, in *GetMenuItemRequest) (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItem", ctx, in)
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItem indicates an expected call of GetMenuItem.
func (mr *MockMenuServiceServerMockRecorder) GetMenuItem(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItem", reflect.TypeOf((*MockMenuServiceServer)(nil).GetMenuItem), ctx, in)
}

// ListMenuItems mocks base method.
func (m *MockMenuServiceServer) ListMenuItems(blob *ListMenuItemsRequest, server MenuService_ListMenuItemsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMenuItems", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMenuItems indicates an expected call of ListMenuItems.
func (mr *MockMenuServiceServerMockRecorder) ListMenuItems(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMenuItems", reflect.TypeOf((*MockMenuServiceServer)(nil).ListMenuItems), blob, server)
}
