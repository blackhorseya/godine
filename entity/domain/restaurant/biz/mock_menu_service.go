// Code generated by MockGen. DO NOT EDIT.
// Source: menu_service.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_menu_service.go -package=biz -source=menu_service.go
//

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/restaurant/model"
	contextx "github.com/blackhorseya/godine/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIMenuBiz is a mock of IMenuBiz interface.
type MockIMenuBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIMenuBizMockRecorder
}

// MockIMenuBizMockRecorder is the mock recorder for MockIMenuBiz.
type MockIMenuBizMockRecorder struct {
	mock *MockIMenuBiz
}

// NewMockIMenuBiz creates a new mock instance.
func NewMockIMenuBiz(ctrl *gomock.Controller) *MockIMenuBiz {
	mock := &MockIMenuBiz{ctrl: ctrl}
	mock.recorder = &MockIMenuBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMenuBiz) EXPECT() *MockIMenuBizMockRecorder {
	return m.recorder
}

// AddMenuItem mocks base method.
func (m *MockIMenuBiz) AddMenuItem(ctx contextx.Contextx, restaurantID, name, description string, price float64) (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMenuItem", ctx, restaurantID, name, description, price)
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMenuItem indicates an expected call of AddMenuItem.
func (mr *MockIMenuBizMockRecorder) AddMenuItem(ctx, restaurantID, name, description, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMenuItem", reflect.TypeOf((*MockIMenuBiz)(nil).AddMenuItem), ctx, restaurantID, name, description, price)
}

// GetMenuItem mocks base method.
func (m *MockIMenuBiz) GetMenuItem(ctx contextx.Contextx, restaurantID, menuItemID string) (*model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItem", ctx, restaurantID, menuItemID)
	ret0, _ := ret[0].(*model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItem indicates an expected call of GetMenuItem.
func (mr *MockIMenuBizMockRecorder) GetMenuItem(ctx, restaurantID, menuItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItem", reflect.TypeOf((*MockIMenuBiz)(nil).GetMenuItem), ctx, restaurantID, menuItemID)
}

// ListMenuItems mocks base method.
func (m *MockIMenuBiz) ListMenuItems(ctx contextx.Contextx, restaurantID string) ([]model.MenuItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMenuItems", ctx, restaurantID)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMenuItems indicates an expected call of ListMenuItems.
func (mr *MockIMenuBizMockRecorder) ListMenuItems(ctx, restaurantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMenuItems", reflect.TypeOf((*MockIMenuBiz)(nil).ListMenuItems), ctx, restaurantID)
}

// RemoveMenuItem mocks base method.
func (m *MockIMenuBiz) RemoveMenuItem(ctx contextx.Contextx, restaurantID, menuItemID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMenuItem", ctx, restaurantID, menuItemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMenuItem indicates an expected call of RemoveMenuItem.
func (mr *MockIMenuBizMockRecorder) RemoveMenuItem(ctx, restaurantID, menuItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMenuItem", reflect.TypeOf((*MockIMenuBiz)(nil).RemoveMenuItem), ctx, restaurantID, menuItemID)
}

// UpdateMenuItem mocks base method.
func (m *MockIMenuBiz) UpdateMenuItem(ctx contextx.Contextx, restaurantID, menuItemID, name, description string, price float64, isAvailable bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuItem", ctx, restaurantID, menuItemID, name, description, price, isAvailable)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenuItem indicates an expected call of UpdateMenuItem.
func (mr *MockIMenuBizMockRecorder) UpdateMenuItem(ctx, restaurantID, menuItemID, name, description, price, isAvailable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuItem", reflect.TypeOf((*MockIMenuBiz)(nil).UpdateMenuItem), ctx, restaurantID, menuItemID, name, description, price, isAvailable)
}
