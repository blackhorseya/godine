// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: domain/restaurant/biz/menu.proto

package bizconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	biz "github.com/blackhorseya/godine/entity/domain/restaurant/biz"
	model "github.com/blackhorseya/godine/entity/domain/restaurant/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MenuServiceName is the fully-qualified name of the MenuService service.
	MenuServiceName = "restaurant.MenuService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MenuServiceAddMenuItemProcedure is the fully-qualified name of the MenuService's AddMenuItem RPC.
	MenuServiceAddMenuItemProcedure = "/restaurant.MenuService/AddMenuItem"
	// MenuServiceGetMenuItemProcedure is the fully-qualified name of the MenuService's GetMenuItem RPC.
	MenuServiceGetMenuItemProcedure = "/restaurant.MenuService/GetMenuItem"
	// MenuServiceListMenuItemsProcedure is the fully-qualified name of the MenuService's ListMenuItems
	// RPC.
	MenuServiceListMenuItemsProcedure = "/restaurant.MenuService/ListMenuItems"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	menuServiceServiceDescriptor             = biz.File_domain_restaurant_biz_menu_proto.Services().ByName("MenuService")
	menuServiceAddMenuItemMethodDescriptor   = menuServiceServiceDescriptor.Methods().ByName("AddMenuItem")
	menuServiceGetMenuItemMethodDescriptor   = menuServiceServiceDescriptor.Methods().ByName("GetMenuItem")
	menuServiceListMenuItemsMethodDescriptor = menuServiceServiceDescriptor.Methods().ByName("ListMenuItems")
)

// MenuServiceClient is a client for the restaurant.MenuService service.
type MenuServiceClient interface {
	AddMenuItem(context.Context, *connect.Request[biz.AddMenuItemRequest]) (*connect.Response[model.MenuItem], error)
	GetMenuItem(context.Context, *connect.Request[biz.GetMenuItemRequest]) (*connect.Response[model.MenuItem], error)
	ListMenuItems(context.Context, *connect.Request[biz.ListMenuItemsRequest]) (*connect.ServerStreamForClient[model.MenuItem], error)
}

// NewMenuServiceClient constructs a client for the restaurant.MenuService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMenuServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MenuServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &menuServiceClient{
		addMenuItem: connect.NewClient[biz.AddMenuItemRequest, model.MenuItem](
			httpClient,
			baseURL+MenuServiceAddMenuItemProcedure,
			connect.WithSchema(menuServiceAddMenuItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMenuItem: connect.NewClient[biz.GetMenuItemRequest, model.MenuItem](
			httpClient,
			baseURL+MenuServiceGetMenuItemProcedure,
			connect.WithSchema(menuServiceGetMenuItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMenuItems: connect.NewClient[biz.ListMenuItemsRequest, model.MenuItem](
			httpClient,
			baseURL+MenuServiceListMenuItemsProcedure,
			connect.WithSchema(menuServiceListMenuItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// menuServiceClient implements MenuServiceClient.
type menuServiceClient struct {
	addMenuItem   *connect.Client[biz.AddMenuItemRequest, model.MenuItem]
	getMenuItem   *connect.Client[biz.GetMenuItemRequest, model.MenuItem]
	listMenuItems *connect.Client[biz.ListMenuItemsRequest, model.MenuItem]
}

// AddMenuItem calls restaurant.MenuService.AddMenuItem.
func (c *menuServiceClient) AddMenuItem(ctx context.Context, req *connect.Request[biz.AddMenuItemRequest]) (*connect.Response[model.MenuItem], error) {
	return c.addMenuItem.CallUnary(ctx, req)
}

// GetMenuItem calls restaurant.MenuService.GetMenuItem.
func (c *menuServiceClient) GetMenuItem(ctx context.Context, req *connect.Request[biz.GetMenuItemRequest]) (*connect.Response[model.MenuItem], error) {
	return c.getMenuItem.CallUnary(ctx, req)
}

// ListMenuItems calls restaurant.MenuService.ListMenuItems.
func (c *menuServiceClient) ListMenuItems(ctx context.Context, req *connect.Request[biz.ListMenuItemsRequest]) (*connect.ServerStreamForClient[model.MenuItem], error) {
	return c.listMenuItems.CallServerStream(ctx, req)
}

// MenuServiceHandler is an implementation of the restaurant.MenuService service.
type MenuServiceHandler interface {
	AddMenuItem(context.Context, *connect.Request[biz.AddMenuItemRequest]) (*connect.Response[model.MenuItem], error)
	GetMenuItem(context.Context, *connect.Request[biz.GetMenuItemRequest]) (*connect.Response[model.MenuItem], error)
	ListMenuItems(context.Context, *connect.Request[biz.ListMenuItemsRequest], *connect.ServerStream[model.MenuItem]) error
}

// NewMenuServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMenuServiceHandler(svc MenuServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	menuServiceAddMenuItemHandler := connect.NewUnaryHandler(
		MenuServiceAddMenuItemProcedure,
		svc.AddMenuItem,
		connect.WithSchema(menuServiceAddMenuItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	menuServiceGetMenuItemHandler := connect.NewUnaryHandler(
		MenuServiceGetMenuItemProcedure,
		svc.GetMenuItem,
		connect.WithSchema(menuServiceGetMenuItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	menuServiceListMenuItemsHandler := connect.NewServerStreamHandler(
		MenuServiceListMenuItemsProcedure,
		svc.ListMenuItems,
		connect.WithSchema(menuServiceListMenuItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/restaurant.MenuService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MenuServiceAddMenuItemProcedure:
			menuServiceAddMenuItemHandler.ServeHTTP(w, r)
		case MenuServiceGetMenuItemProcedure:
			menuServiceGetMenuItemHandler.ServeHTTP(w, r)
		case MenuServiceListMenuItemsProcedure:
			menuServiceListMenuItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMenuServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMenuServiceHandler struct{}

func (UnimplementedMenuServiceHandler) AddMenuItem(context.Context, *connect.Request[biz.AddMenuItemRequest]) (*connect.Response[model.MenuItem], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.MenuService.AddMenuItem is not implemented"))
}

func (UnimplementedMenuServiceHandler) GetMenuItem(context.Context, *connect.Request[biz.GetMenuItemRequest]) (*connect.Response[model.MenuItem], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.MenuService.GetMenuItem is not implemented"))
}

func (UnimplementedMenuServiceHandler) ListMenuItems(context.Context, *connect.Request[biz.ListMenuItemsRequest], *connect.ServerStream[model.MenuItem]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.MenuService.ListMenuItems is not implemented"))
}
