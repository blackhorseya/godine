// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: domain/restaurant/biz/restaurant.proto

package bizconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	biz "github.com/blackhorseya/godine/entity/domain/restaurant/biz"
	model "github.com/blackhorseya/godine/entity/domain/restaurant/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RestaurantServiceName is the fully-qualified name of the RestaurantService service.
	RestaurantServiceName = "restaurant.RestaurantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RestaurantServiceCreateRestaurantProcedure is the fully-qualified name of the RestaurantService's
	// CreateRestaurant RPC.
	RestaurantServiceCreateRestaurantProcedure = "/restaurant.RestaurantService/CreateRestaurant"
	// RestaurantServiceListRestaurantsProcedure is the fully-qualified name of the RestaurantService's
	// ListRestaurants RPC.
	RestaurantServiceListRestaurantsProcedure = "/restaurant.RestaurantService/ListRestaurants"
	// RestaurantServiceGetRestaurantProcedure is the fully-qualified name of the RestaurantService's
	// GetRestaurant RPC.
	RestaurantServiceGetRestaurantProcedure = "/restaurant.RestaurantService/GetRestaurant"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	restaurantServiceServiceDescriptor                = biz.File_domain_restaurant_biz_restaurant_proto.Services().ByName("RestaurantService")
	restaurantServiceCreateRestaurantMethodDescriptor = restaurantServiceServiceDescriptor.Methods().ByName("CreateRestaurant")
	restaurantServiceListRestaurantsMethodDescriptor  = restaurantServiceServiceDescriptor.Methods().ByName("ListRestaurants")
	restaurantServiceGetRestaurantMethodDescriptor    = restaurantServiceServiceDescriptor.Methods().ByName("GetRestaurant")
)

// RestaurantServiceClient is a client for the restaurant.RestaurantService service.
type RestaurantServiceClient interface {
	CreateRestaurant(context.Context, *connect.Request[biz.CreateRestaurantRequest]) (*connect.Response[model.Restaurant], error)
	ListRestaurants(context.Context, *connect.Request[biz.ListRestaurantsRequest]) (*connect.ServerStreamForClient[model.Restaurant], error)
	GetRestaurant(context.Context, *connect.Request[biz.GetRestaurantRequest]) (*connect.Response[model.Restaurant], error)
}

// NewRestaurantServiceClient constructs a client for the restaurant.RestaurantService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRestaurantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RestaurantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &restaurantServiceClient{
		createRestaurant: connect.NewClient[biz.CreateRestaurantRequest, model.Restaurant](
			httpClient,
			baseURL+RestaurantServiceCreateRestaurantProcedure,
			connect.WithSchema(restaurantServiceCreateRestaurantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRestaurants: connect.NewClient[biz.ListRestaurantsRequest, model.Restaurant](
			httpClient,
			baseURL+RestaurantServiceListRestaurantsProcedure,
			connect.WithSchema(restaurantServiceListRestaurantsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRestaurant: connect.NewClient[biz.GetRestaurantRequest, model.Restaurant](
			httpClient,
			baseURL+RestaurantServiceGetRestaurantProcedure,
			connect.WithSchema(restaurantServiceGetRestaurantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// restaurantServiceClient implements RestaurantServiceClient.
type restaurantServiceClient struct {
	createRestaurant *connect.Client[biz.CreateRestaurantRequest, model.Restaurant]
	listRestaurants  *connect.Client[biz.ListRestaurantsRequest, model.Restaurant]
	getRestaurant    *connect.Client[biz.GetRestaurantRequest, model.Restaurant]
}

// CreateRestaurant calls restaurant.RestaurantService.CreateRestaurant.
func (c *restaurantServiceClient) CreateRestaurant(ctx context.Context, req *connect.Request[biz.CreateRestaurantRequest]) (*connect.Response[model.Restaurant], error) {
	return c.createRestaurant.CallUnary(ctx, req)
}

// ListRestaurants calls restaurant.RestaurantService.ListRestaurants.
func (c *restaurantServiceClient) ListRestaurants(ctx context.Context, req *connect.Request[biz.ListRestaurantsRequest]) (*connect.ServerStreamForClient[model.Restaurant], error) {
	return c.listRestaurants.CallServerStream(ctx, req)
}

// GetRestaurant calls restaurant.RestaurantService.GetRestaurant.
func (c *restaurantServiceClient) GetRestaurant(ctx context.Context, req *connect.Request[biz.GetRestaurantRequest]) (*connect.Response[model.Restaurant], error) {
	return c.getRestaurant.CallUnary(ctx, req)
}

// RestaurantServiceHandler is an implementation of the restaurant.RestaurantService service.
type RestaurantServiceHandler interface {
	CreateRestaurant(context.Context, *connect.Request[biz.CreateRestaurantRequest]) (*connect.Response[model.Restaurant], error)
	ListRestaurants(context.Context, *connect.Request[biz.ListRestaurantsRequest], *connect.ServerStream[model.Restaurant]) error
	GetRestaurant(context.Context, *connect.Request[biz.GetRestaurantRequest]) (*connect.Response[model.Restaurant], error)
}

// NewRestaurantServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRestaurantServiceHandler(svc RestaurantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	restaurantServiceCreateRestaurantHandler := connect.NewUnaryHandler(
		RestaurantServiceCreateRestaurantProcedure,
		svc.CreateRestaurant,
		connect.WithSchema(restaurantServiceCreateRestaurantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	restaurantServiceListRestaurantsHandler := connect.NewServerStreamHandler(
		RestaurantServiceListRestaurantsProcedure,
		svc.ListRestaurants,
		connect.WithSchema(restaurantServiceListRestaurantsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	restaurantServiceGetRestaurantHandler := connect.NewUnaryHandler(
		RestaurantServiceGetRestaurantProcedure,
		svc.GetRestaurant,
		connect.WithSchema(restaurantServiceGetRestaurantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/restaurant.RestaurantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RestaurantServiceCreateRestaurantProcedure:
			restaurantServiceCreateRestaurantHandler.ServeHTTP(w, r)
		case RestaurantServiceListRestaurantsProcedure:
			restaurantServiceListRestaurantsHandler.ServeHTTP(w, r)
		case RestaurantServiceGetRestaurantProcedure:
			restaurantServiceGetRestaurantHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRestaurantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRestaurantServiceHandler struct{}

func (UnimplementedRestaurantServiceHandler) CreateRestaurant(context.Context, *connect.Request[biz.CreateRestaurantRequest]) (*connect.Response[model.Restaurant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.RestaurantService.CreateRestaurant is not implemented"))
}

func (UnimplementedRestaurantServiceHandler) ListRestaurants(context.Context, *connect.Request[biz.ListRestaurantsRequest], *connect.ServerStream[model.Restaurant]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.RestaurantService.ListRestaurants is not implemented"))
}

func (UnimplementedRestaurantServiceHandler) GetRestaurant(context.Context, *connect.Request[biz.GetRestaurantRequest]) (*connect.Response[model.Restaurant], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.RestaurantService.GetRestaurant is not implemented"))
}
