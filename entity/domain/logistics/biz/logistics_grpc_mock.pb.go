// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: entity/domain/logistics/biz/logistics.proto

package biz

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/logistics/model"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockLogisticsService_ListDeliveriesClient is a mock of LogisticsService_ListDeliveriesClient interface.
type MockLogisticsService_ListDeliveriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogisticsService_ListDeliveriesClientMockRecorder
}

// MockLogisticsService_ListDeliveriesClientMockRecorder is the mock recorder for MockLogisticsService_ListDeliveriesClient.
type MockLogisticsService_ListDeliveriesClientMockRecorder struct {
	mock *MockLogisticsService_ListDeliveriesClient
}

// NewMockLogisticsService_ListDeliveriesClient creates a new mock instance.
func NewMockLogisticsService_ListDeliveriesClient(ctrl *gomock.Controller) *MockLogisticsService_ListDeliveriesClient {
	mock := &MockLogisticsService_ListDeliveriesClient{ctrl: ctrl}
	mock.recorder = &MockLogisticsService_ListDeliveriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogisticsService_ListDeliveriesClient) EXPECT() *MockLogisticsService_ListDeliveriesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) Recv() (*model.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockLogisticsService_ListDeliveriesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLogisticsService_ListDeliveriesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLogisticsService_ListDeliveriesClient)(nil).Trailer))
}

// MockLogisticsService_ListDeliveriesServer is a mock of LogisticsService_ListDeliveriesServer interface.
type MockLogisticsService_ListDeliveriesServer struct {
	ctrl     *gomock.Controller
	recorder *MockLogisticsService_ListDeliveriesServerMockRecorder
}

// MockLogisticsService_ListDeliveriesServerMockRecorder is the mock recorder for MockLogisticsService_ListDeliveriesServer.
type MockLogisticsService_ListDeliveriesServerMockRecorder struct {
	mock *MockLogisticsService_ListDeliveriesServer
}

// NewMockLogisticsService_ListDeliveriesServer creates a new mock instance.
func NewMockLogisticsService_ListDeliveriesServer(ctrl *gomock.Controller) *MockLogisticsService_ListDeliveriesServer {
	mock := &MockLogisticsService_ListDeliveriesServer{ctrl: ctrl}
	mock.recorder = &MockLogisticsService_ListDeliveriesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogisticsService_ListDeliveriesServer) EXPECT() *MockLogisticsService_ListDeliveriesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) Send(arg0 *model.Delivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLogisticsService_ListDeliveriesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLogisticsService_ListDeliveriesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLogisticsService_ListDeliveriesServer)(nil).SetTrailer), arg0)
}

// MockLogisticsServiceClient is a mock of LogisticsServiceClient interface.
type MockLogisticsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogisticsServiceClientMockRecorder
}

// MockLogisticsServiceClientMockRecorder is the mock recorder for MockLogisticsServiceClient.
type MockLogisticsServiceClientMockRecorder struct {
	mock *MockLogisticsServiceClient
}

// NewMockLogisticsServiceClient creates a new mock instance.
func NewMockLogisticsServiceClient(ctrl *gomock.Controller) *MockLogisticsServiceClient {
	mock := &MockLogisticsServiceClient{ctrl: ctrl}
	mock.recorder = &MockLogisticsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogisticsServiceClient) EXPECT() *MockLogisticsServiceClientMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockLogisticsServiceClient) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*model.Delivery, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDelivery", varargs...)
	ret0, _ := ret[0].(*model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockLogisticsServiceClientMockRecorder) CreateDelivery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockLogisticsServiceClient)(nil).CreateDelivery), varargs...)
}

// ListDeliveries mocks base method.
func (m *MockLogisticsServiceClient) ListDeliveries(ctx context.Context, in *ListDeliveriesRequest, opts ...grpc.CallOption) (LogisticsService_ListDeliveriesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliveries", varargs...)
	ret0, _ := ret[0].(LogisticsService_ListDeliveriesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliveries indicates an expected call of ListDeliveries.
func (mr *MockLogisticsServiceClientMockRecorder) ListDeliveries(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliveries", reflect.TypeOf((*MockLogisticsServiceClient)(nil).ListDeliveries), varargs...)
}

// MockLogisticsServiceServer is a mock of LogisticsServiceServer interface.
type MockLogisticsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLogisticsServiceServerMockRecorder
}

// MockLogisticsServiceServerMockRecorder is the mock recorder for MockLogisticsServiceServer.
type MockLogisticsServiceServerMockRecorder struct {
	mock *MockLogisticsServiceServer
}

// NewMockLogisticsServiceServer creates a new mock instance.
func NewMockLogisticsServiceServer(ctrl *gomock.Controller) *MockLogisticsServiceServer {
	mock := &MockLogisticsServiceServer{ctrl: ctrl}
	mock.recorder = &MockLogisticsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogisticsServiceServer) EXPECT() *MockLogisticsServiceServerMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockLogisticsServiceServer) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest) (*model.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelivery", ctx, in)
	ret0, _ := ret[0].(*model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockLogisticsServiceServerMockRecorder) CreateDelivery(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockLogisticsServiceServer)(nil).CreateDelivery), ctx, in)
}

// ListDeliveries mocks base method.
func (m *MockLogisticsServiceServer) ListDeliveries(blob *ListDeliveriesRequest, server LogisticsService_ListDeliveriesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliveries", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliveries indicates an expected call of ListDeliveries.
func (mr *MockLogisticsServiceServerMockRecorder) ListDeliveries(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliveries", reflect.TypeOf((*MockLogisticsServiceServer)(nil).ListDeliveries), blob, server)
}
