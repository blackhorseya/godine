// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: entity/domain/logistics/biz/logistics.proto

package biz

import (
	context "context"
	model "github.com/blackhorseya/godine/entity/domain/logistics/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogisticsService_CreateDelivery_FullMethodName = "/logistics.LogisticsService/CreateDelivery"
	LogisticsService_ListDeliveries_FullMethodName = "/logistics.LogisticsService/ListDeliveries"
)

// LogisticsServiceClient is the client API for LogisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticsServiceClient interface {
	CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*model.Delivery, error)
	ListDeliveries(ctx context.Context, in *ListDeliveriesRequest, opts ...grpc.CallOption) (LogisticsService_ListDeliveriesClient, error)
}

type logisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsServiceClient(cc grpc.ClientConnInterface) LogisticsServiceClient {
	return &logisticsServiceClient{cc}
}

func (c *logisticsServiceClient) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*model.Delivery, error) {
	out := new(model.Delivery)
	err := c.cc.Invoke(ctx, LogisticsService_CreateDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) ListDeliveries(ctx context.Context, in *ListDeliveriesRequest, opts ...grpc.CallOption) (LogisticsService_ListDeliveriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogisticsService_ServiceDesc.Streams[0], LogisticsService_ListDeliveries_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logisticsServiceListDeliveriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogisticsService_ListDeliveriesClient interface {
	Recv() (*model.Delivery, error)
	grpc.ClientStream
}

type logisticsServiceListDeliveriesClient struct {
	grpc.ClientStream
}

func (x *logisticsServiceListDeliveriesClient) Recv() (*model.Delivery, error) {
	m := new(model.Delivery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogisticsServiceServer is the server API for LogisticsService service.
// All implementations should embed UnimplementedLogisticsServiceServer
// for forward compatibility
type LogisticsServiceServer interface {
	CreateDelivery(context.Context, *CreateDeliveryRequest) (*model.Delivery, error)
	ListDeliveries(*ListDeliveriesRequest, LogisticsService_ListDeliveriesServer) error
}

// UnimplementedLogisticsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLogisticsServiceServer struct {
}

func (UnimplementedLogisticsServiceServer) CreateDelivery(context.Context, *CreateDeliveryRequest) (*model.Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelivery not implemented")
}
func (UnimplementedLogisticsServiceServer) ListDeliveries(*ListDeliveriesRequest, LogisticsService_ListDeliveriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeliveries not implemented")
}

// UnsafeLogisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsServiceServer will
// result in compilation errors.
type UnsafeLogisticsServiceServer interface {
	mustEmbedUnimplementedLogisticsServiceServer()
}

func RegisterLogisticsServiceServer(s grpc.ServiceRegistrar, srv LogisticsServiceServer) {
	s.RegisterService(&LogisticsService_ServiceDesc, srv)
}

func _LogisticsService_CreateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsService_CreateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateDelivery(ctx, req.(*CreateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_ListDeliveries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeliveriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogisticsServiceServer).ListDeliveries(m, &logisticsServiceListDeliveriesServer{stream})
}

type LogisticsService_ListDeliveriesServer interface {
	Send(*model.Delivery) error
	grpc.ServerStream
}

type logisticsServiceListDeliveriesServer struct {
	grpc.ServerStream
}

func (x *logisticsServiceListDeliveriesServer) Send(m *model.Delivery) error {
	return x.ServerStream.SendMsg(m)
}

// LogisticsService_ServiceDesc is the grpc.ServiceDesc for LogisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.LogisticsService",
	HandlerType: (*LogisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDelivery",
			Handler:    _LogisticsService_CreateDelivery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDeliveries",
			Handler:       _LogisticsService_ListDeliveries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "entity/domain/logistics/biz/logistics.proto",
}
