// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: domain/notification/biz/notification.proto

package bizconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	biz "github.com/blackhorseya/godine/entity/domain/notification/biz"
	model "github.com/blackhorseya/godine/entity/domain/notification/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "notification.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceSendNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendNotification RPC.
	NotificationServiceSendNotificationProcedure = "/notification.NotificationService/SendNotification"
	// NotificationServiceListMyNotificationsProcedure is the fully-qualified name of the
	// NotificationService's ListMyNotifications RPC.
	NotificationServiceListMyNotificationsProcedure = "/notification.NotificationService/ListMyNotifications"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	notificationServiceServiceDescriptor                   = biz.File_domain_notification_biz_notification_proto.Services().ByName("NotificationService")
	notificationServiceSendNotificationMethodDescriptor    = notificationServiceServiceDescriptor.Methods().ByName("SendNotification")
	notificationServiceListMyNotificationsMethodDescriptor = notificationServiceServiceDescriptor.Methods().ByName("ListMyNotifications")
)

// NotificationServiceClient is a client for the notification.NotificationService service.
type NotificationServiceClient interface {
	SendNotification(context.Context, *connect.Request[biz.SendNotificationRequest]) (*connect.Response[model.Notification], error)
	ListMyNotifications(context.Context, *connect.Request[biz.ListMyNotificationsRequest]) (*connect.ServerStreamForClient[model.Notification], error)
}

// NewNotificationServiceClient constructs a client for the notification.NotificationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		sendNotification: connect.NewClient[biz.SendNotificationRequest, model.Notification](
			httpClient,
			baseURL+NotificationServiceSendNotificationProcedure,
			connect.WithSchema(notificationServiceSendNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMyNotifications: connect.NewClient[biz.ListMyNotificationsRequest, model.Notification](
			httpClient,
			baseURL+NotificationServiceListMyNotificationsProcedure,
			connect.WithSchema(notificationServiceListMyNotificationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	sendNotification    *connect.Client[biz.SendNotificationRequest, model.Notification]
	listMyNotifications *connect.Client[biz.ListMyNotificationsRequest, model.Notification]
}

// SendNotification calls notification.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect.Request[biz.SendNotificationRequest]) (*connect.Response[model.Notification], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// ListMyNotifications calls notification.NotificationService.ListMyNotifications.
func (c *notificationServiceClient) ListMyNotifications(ctx context.Context, req *connect.Request[biz.ListMyNotificationsRequest]) (*connect.ServerStreamForClient[model.Notification], error) {
	return c.listMyNotifications.CallServerStream(ctx, req)
}

// NotificationServiceHandler is an implementation of the notification.NotificationService service.
type NotificationServiceHandler interface {
	SendNotification(context.Context, *connect.Request[biz.SendNotificationRequest]) (*connect.Response[model.Notification], error)
	ListMyNotifications(context.Context, *connect.Request[biz.ListMyNotificationsRequest], *connect.ServerStream[model.Notification]) error
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceSendNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendNotificationProcedure,
		svc.SendNotification,
		connect.WithSchema(notificationServiceSendNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListMyNotificationsHandler := connect.NewServerStreamHandler(
		NotificationServiceListMyNotificationsProcedure,
		svc.ListMyNotifications,
		connect.WithSchema(notificationServiceListMyNotificationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/notification.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceSendNotificationProcedure:
			notificationServiceSendNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceListMyNotificationsProcedure:
			notificationServiceListMyNotificationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect.Request[biz.SendNotificationRequest]) (*connect.Response[model.Notification], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.NotificationService.SendNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListMyNotifications(context.Context, *connect.Request[biz.ListMyNotificationsRequest], *connect.ServerStream[model.Notification]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("notification.NotificationService.ListMyNotifications is not implemented"))
}
