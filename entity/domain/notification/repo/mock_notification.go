// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_notification.go -package=repo -source=notification.go
//

// Package repo is a generated GoMock package.
package repo

import (
	"reflect"

	"github.com/blackhorseya/godine/entity/domain/notification/model"
	"github.com/blackhorseya/godine/pkg/contextx"
	"go.uber.org/mock/gomock"
)

// MockINotificationRepo is a mock of INotificationRepo interface.
type MockINotificationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationRepoMockRecorder
}

// MockINotificationRepoMockRecorder is the mock recorder for MockINotificationRepo.
type MockINotificationRepoMockRecorder struct {
	mock *MockINotificationRepo
}

// NewMockINotificationRepo creates a new mock instance.
func NewMockINotificationRepo(ctrl *gomock.Controller) *MockINotificationRepo {
	mock := &MockINotificationRepo{ctrl: ctrl}
	mock.recorder = &MockINotificationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationRepo) EXPECT() *MockINotificationRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockINotificationRepo) Create(ctx contextx.Contextx, notify *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notify)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockINotificationRepoMockRecorder) Create(ctx, notify any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockINotificationRepo)(nil).Create), ctx, notify)
}

// GetByID mocks base method.
func (m *MockINotificationRepo) GetByID(ctx contextx.Contextx, id string) (*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockINotificationRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockINotificationRepo)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockINotificationRepo) List(ctx contextx.Contextx, cond ListCondition) ([]*model.Notification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, cond)
	ret0, _ := ret[0].([]*model.Notification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockINotificationRepoMockRecorder) List(ctx, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockINotificationRepo)(nil).List), ctx, cond)
}

// UpdateStatus mocks base method.
func (m *MockINotificationRepo) UpdateStatus(ctx contextx.Contextx, id, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockINotificationRepoMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockINotificationRepo)(nil).UpdateStatus), ctx, id, status)
}
