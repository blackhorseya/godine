// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_payment.go -package=repo -source=payment.go
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/payment/model"
	utils "github.com/blackhorseya/godine/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockIPaymentRepo is a mock of IPaymentRepo interface.
type MockIPaymentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentRepoMockRecorder
}

// MockIPaymentRepoMockRecorder is the mock recorder for MockIPaymentRepo.
type MockIPaymentRepoMockRecorder struct {
	mock *MockIPaymentRepo
}

// NewMockIPaymentRepo creates a new mock instance.
func NewMockIPaymentRepo(ctrl *gomock.Controller) *MockIPaymentRepo {
	mock := &MockIPaymentRepo{ctrl: ctrl}
	mock.recorder = &MockIPaymentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentRepo) EXPECT() *MockIPaymentRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPaymentRepo) Create(c context.Context, item *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPaymentRepoMockRecorder) Create(c, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPaymentRepo)(nil).Create), c, item)
}

// Delete mocks base method.
func (m *MockIPaymentRepo) Delete(c context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPaymentRepoMockRecorder) Delete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPaymentRepo)(nil).Delete), c, id)
}

// GetByID mocks base method.
func (m *MockIPaymentRepo) GetByID(c context.Context, id string) (*model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIPaymentRepoMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIPaymentRepo)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockIPaymentRepo) List(c context.Context, cond utils.Pagination) ([]*model.Payment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, cond)
	ret0, _ := ret[0].([]*model.Payment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIPaymentRepoMockRecorder) List(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPaymentRepo)(nil).List), c, cond)
}

// Update mocks base method.
func (m *MockIPaymentRepo) Update(c context.Context, item *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPaymentRepoMockRecorder) Update(c, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPaymentRepo)(nil).Update), c, item)
}
