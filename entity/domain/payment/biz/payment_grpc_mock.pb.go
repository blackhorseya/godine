// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: domain/payment/biz/payment.proto

package biz

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/payment/model"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPaymentServiceClient is a mock of PaymentServiceClient interface.
type MockPaymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceClientMockRecorder
}

// MockPaymentServiceClientMockRecorder is the mock recorder for MockPaymentServiceClient.
type MockPaymentServiceClientMockRecorder struct {
	mock *MockPaymentServiceClient
}

// NewMockPaymentServiceClient creates a new mock instance.
func NewMockPaymentServiceClient(ctrl *gomock.Controller) *MockPaymentServiceClient {
	mock := &MockPaymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceClient) EXPECT() *MockPaymentServiceClientMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*model.Payment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePayment", varargs...)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceClientMockRecorder) CreatePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentServiceClient)(nil).CreatePayment), varargs...)
}

// GetPayment mocks base method.
func (m *MockPaymentServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*model.Payment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPayment", varargs...)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockPaymentServiceClientMockRecorder) GetPayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentServiceClient)(nil).GetPayment), varargs...)
}

// MockPaymentServiceServer is a mock of PaymentServiceServer interface.
type MockPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceServerMockRecorder
}

// MockPaymentServiceServerMockRecorder is the mock recorder for MockPaymentServiceServer.
type MockPaymentServiceServerMockRecorder struct {
	mock *MockPaymentServiceServer
}

// NewMockPaymentServiceServer creates a new mock instance.
func NewMockPaymentServiceServer(ctrl *gomock.Controller) *MockPaymentServiceServer {
	mock := &MockPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceServer) EXPECT() *MockPaymentServiceServerMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentServiceServer) CreatePayment(ctx context.Context, in *CreatePaymentRequest) (*model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, in)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceServerMockRecorder) CreatePayment(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).CreatePayment), ctx, in)
}

// GetPayment mocks base method.
func (m *MockPaymentServiceServer) GetPayment(ctx context.Context, in *GetPaymentRequest) (*model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, in)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockPaymentServiceServerMockRecorder) GetPayment(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).GetPayment), ctx, in)
}
