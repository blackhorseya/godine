// Code generated by MockGen. DO NOT EDIT.
// Source: payment_service.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_payment_service.go -package=biz -source=payment_service.go
//

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/domain/payment/model"
	contextx "github.com/blackhorseya/godine/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIPaymentBiz is a mock of IPaymentBiz interface.
type MockIPaymentBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentBizMockRecorder
}

// MockIPaymentBizMockRecorder is the mock recorder for MockIPaymentBiz.
type MockIPaymentBizMockRecorder struct {
	mock *MockIPaymentBiz
}

// NewMockIPaymentBiz creates a new mock instance.
func NewMockIPaymentBiz(ctrl *gomock.Controller) *MockIPaymentBiz {
	mock := &MockIPaymentBiz{ctrl: ctrl}
	mock.recorder = &MockIPaymentBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentBiz) EXPECT() *MockIPaymentBizMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockIPaymentBiz) CreatePayment(ctx contextx.Contextx, orderID string, amount model.PaymentAmount) (*model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, orderID, amount)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockIPaymentBizMockRecorder) CreatePayment(ctx, orderID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockIPaymentBiz)(nil).CreatePayment), ctx, orderID, amount)
}

// GetPaymentByID mocks base method.
func (m *MockIPaymentBiz) GetPaymentByID(ctx contextx.Contextx, id string) (*model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByID", ctx, id)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByID indicates an expected call of GetPaymentByID.
func (mr *MockIPaymentBizMockRecorder) GetPaymentByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByID", reflect.TypeOf((*MockIPaymentBiz)(nil).GetPaymentByID), ctx, id)
}

// ListPayments mocks base method.
func (m *MockIPaymentBiz) ListPayments(ctx contextx.Contextx, options ListPaymentsOptions) ([]*model.Payment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayments", ctx, options)
	ret0, _ := ret[0].([]*model.Payment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPayments indicates an expected call of ListPayments.
func (mr *MockIPaymentBizMockRecorder) ListPayments(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayments", reflect.TypeOf((*MockIPaymentBiz)(nil).ListPayments), ctx, options)
}
