// Code generated by MockGen. DO NOT EDIT.
// Source: order_service.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_order_service.go -package=biz -source=order_service.go
//

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	model "github.com/blackhorseya/godine/entity/order/model"
	contextx "github.com/blackhorseya/godine/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrderBiz is a mock of IOrderBiz interface.
type MockIOrderBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderBizMockRecorder
}

// MockIOrderBizMockRecorder is the mock recorder for MockIOrderBiz.
type MockIOrderBizMockRecorder struct {
	mock *MockIOrderBiz
}

// NewMockIOrderBiz creates a new mock instance.
func NewMockIOrderBiz(ctrl *gomock.Controller) *MockIOrderBiz {
	mock := &MockIOrderBiz{ctrl: ctrl}
	mock.recorder = &MockIOrderBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderBiz) EXPECT() *MockIOrderBizMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderBiz) CreateOrder(ctx contextx.Contextx, userID, restaurantID string, items []model.OrderItem, address model.Address, totalAmount float64) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, restaurantID, items, address, totalAmount)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderBizMockRecorder) CreateOrder(ctx, userID, restaurantID, items, address, totalAmount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderBiz)(nil).CreateOrder), ctx, userID, restaurantID, items, address, totalAmount)
}

// GetOrder mocks base method.
func (m *MockIOrderBiz) GetOrder(ctx contextx.Contextx, id string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockIOrderBizMockRecorder) GetOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockIOrderBiz)(nil).GetOrder), ctx, id)
}

// ListOrders mocks base method.
func (m *MockIOrderBiz) ListOrders(ctx contextx.Contextx, options ListOrdersOptions) ([]*model.Order, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, options)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockIOrderBizMockRecorder) ListOrders(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockIOrderBiz)(nil).ListOrders), ctx, options)
}

// ListOrdersByRestaurant mocks base method.
func (m *MockIOrderBiz) ListOrdersByRestaurant(ctx contextx.Contextx, restaurantID string, options ListOrdersOptions) ([]*model.Order, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersByRestaurant", ctx, restaurantID, options)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrdersByRestaurant indicates an expected call of ListOrdersByRestaurant.
func (mr *MockIOrderBizMockRecorder) ListOrdersByRestaurant(ctx, restaurantID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersByRestaurant", reflect.TypeOf((*MockIOrderBiz)(nil).ListOrdersByRestaurant), ctx, restaurantID, options)
}

// ListOrdersByUser mocks base method.
func (m *MockIOrderBiz) ListOrdersByUser(ctx contextx.Contextx, userID string, options ListOrdersOptions) ([]*model.Order, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersByUser", ctx, userID, options)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrdersByUser indicates an expected call of ListOrdersByUser.
func (mr *MockIOrderBizMockRecorder) ListOrdersByUser(ctx, userID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersByUser", reflect.TypeOf((*MockIOrderBiz)(nil).ListOrdersByUser), ctx, userID, options)
}

// OnDeliveryStatusChanged mocks base method.
func (m *MockIOrderBiz) OnDeliveryStatusChanged(ctx contextx.Contextx, orderID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDeliveryStatusChanged", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnDeliveryStatusChanged indicates an expected call of OnDeliveryStatusChanged.
func (mr *MockIOrderBizMockRecorder) OnDeliveryStatusChanged(ctx, orderID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDeliveryStatusChanged", reflect.TypeOf((*MockIOrderBiz)(nil).OnDeliveryStatusChanged), ctx, orderID, status)
}

// UpdateOrderStatus mocks base method.
func (m *MockIOrderBiz) UpdateOrderStatus(ctx contextx.Contextx, id, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockIOrderBizMockRecorder) UpdateOrderStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockIOrderBiz)(nil).UpdateOrderStatus), ctx, id, status)
}
